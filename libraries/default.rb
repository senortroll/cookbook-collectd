def collectd_key(option)
  return option.to_s.split('_').map { |x| x.capitalize }.join if option.instance_of?(Symbol)
  option.to_s
end

def collectd_option(option)
  return option if option.instance_of?(Fixnum) || option == true || option == false
  "\"#{option}\""
end

def collectd_settings(options, level = 0)
  indent = '  ' * level
  output = []
  options.each_pair do |key, value|
    if key.is_a? Array
      if key[1].nil?
        output << "#{indent}<#{key[0]}>"
      else
        output << "#{indent}<#{key[0]} \"#{key[1]}\">"
      end
      output << collectd_settings(value, level + 1)
      output << "#{indent}</#{key[0]}>"
    elsif value.is_a? Array
      value.each do |subvalue|
        output << "#{indent}#{collectd_key(key)} #{collectd_option(subvalue)}"
      end
    else
      output << "#{indent}#{collectd_key(key)} #{collectd_option(value)}"
    end
  end
  output.join("\n")
end

def get_plugin_name(path)
  path.sub %r{/etc/collectd/plugins/(.*)\.conf}, '\1'
end

def collectd_delete_old_plugins(dir)
  Dir[::File.join(dir, '*.conf')].each do |path|
    autogen = false

    ::File.open(path).each_line do |line|
      next unless line.start_with?('#') && line.include?('autogenerated')

      autogen = true
      break
    end

    next unless autogen

    begin
      plugin_name = get_plugin_name(path)
      resources(:collectd_plugin => plugin_name)
    rescue ArgumentError, Chef::Exceptions::ResourceNotFound
      # If the file is autogenerated and has no template it has likely been removed from the run list
      Chef::Log.info("Deleting old plugin config in #{path}")
      ::File.unlink(path)
    end
  end
end
